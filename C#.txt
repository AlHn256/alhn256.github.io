ASP.NET. - технология для выполнения всего, начиная от построения приложений Windows и заканчивая выполнением запросов в базах данных, и специально ориентированный на разработку веб-сайтов. Сегодня ASP.NET пользуется небывалой популярностью, но особо революционной технологией уже больше не является. И хотя базовые функциональные возможности, лежащие в основе ASP.NET, на удивление, выглядят точно так же, как и десять лет назад, разработчики из Microsoft добавили к ним еще кое-какие дополнительные средства и абстракции кодирования более высокого уровня.

NET Framework - это старая платформа, работающая только под Windows.

NET Core - это новая платформа, которая может работать как под Windows, так и под Linux. Но она еще довольно "сырая" - множество инструментов еще не перенесены на нее.
	Подключить одно к другому не получится, потому что у них разные системные библиотеки (а также разные системы сборки если вы используете Visual Studio версии 2015 или ниже).

	Кроме них, есть еще платформы:
	Mono - может работать как под Windows, так и под Linux. Пытается быть совместимой с .NET Framework.
	.NET Compart Framework - несовместимая вариация .NET Framework для Windows CE. Сейчас находится на той же свалке, куда был выброшен Windows CE.
	Unity - форк Mono, платформа для написания графических (в том числе 3D) приложений. Есть вариант встраивания в браузер (не работает в Хроме из-за отказа от NPAPI в Хроме работает благодаря технологии Web Assembly).
	PCL (Portable Class Library) - общее подмножество разных версий .NET Framework, UWP и Silverlight. Совместима с ними в одну сторону (PCL-библиотеку можно использовать на перечисленных платформах).
	UWP - платформа для написания Windows-приложений, использующих WinRT. Не знаю про совместимость с .NET Framework.
	Silverlight - старая платформа (застряла примерно на уровне .NET 4.5), предназначенная для работы в браузере (вроде java-апплетов). Не так давно была серьезно ранена гуглом, который перестал поддерживать NPAPI в своем Хроме. Не совместима с .NET Framework.
	.NET Standard - новая реинкарнация PCL. От PCL отличается подходом к версионированию: если для PCL разработчик библиотеки выбирает список поддерживаемых платформ, то для .NET Standard выбирается версия стандарта (а для платформ известно какие версии ими поддерживаются).

ООП - Это такой подход к написанию программ, который основывается на объектах, а не на функциях и процедурах. Эта модель ставит в центр внимания объекты, а не действия, данные, а не логику. Объект - реализация класса. Все реализации одного класса похожи друг на друга, но могут иметь разные параметры и значения. Объекты могут задействовать методы, специфичные для них. ООП сильно упрощает процесс организации и создания структуры программы. Отдельные объекты, которые можно менять без воздействия на остальные части программы, упрощают также и внесение в программу изменений. Так как с течением времени программы становятся всё более крупными, а их поддержка всё более тяжёлой, эти два аспекта ООП становятся всё более актуальными.

Абстракция - для выделения в моделируемом предмете важного для решения конкретной задачи по предмету, в конечном счёте — контекстное понимание предмета, формализуемое в виде класса

Полиморфизм - обозначает способность языка трактовать связанные объекты в сходной манере. В частности, этот принцип ООП позволяет базовому классу определять набор методов (формально называемый полиморфным интерфейсом), которые доступны всем наследникам. Полиморфный интерфейс класса конструируется с использованием любого количества виртуальных или абстрактных членов. реализуется принцип полиморфизма в С++ С помощью виртуальных методов. В более общем смысле понятие полиморфизма нередко выражается следующим образом: "один интерфейс - множество методов". Это означает, что для группы взаимосвязанных действий можно разработать общий интерфейс. Полиморфизм помогает упростить программу, позволяя использовать один и тот же интерфейс для описания общего класса действий. Выбрать конкретное действие (т.е. метод) в каждом отдельном случае - это задача компилятора. Программисту не нужно делать это самому. Ему достаточно запомнить и правильно использовать общий интерфейс. За самым садистским определением кроется возможность языка программирования для декомпозиции задачи и рефакторинга if'ов и switch'ей.

Инкапсуляция - механизм защиты данных и кода от вмешательства другого кода. Объединеняет атрибуты и методы объекта с целью обеспечения сохранности данных

Уровени доступа (Модификаторы доступа) - позволяют задать допустимую область видимости для членов класса.
    public - Доступ не ограничен
    protected - Доступ возможен из этого класса и из классов, унаследованных от него
    internal - Доступ ограничен только текущей сборкой (.exe, .dll и т. д.)
    protected internal - Доступ ограничен содержащим классом, классами, которые являются производными от содержащего класса, либо классами в той же сборке
    private - Доступ возможен только из этого класса
    private protected - Доступ ограничен содержащим классом или классами, которые являются производными от содержащего типа в той же сборке

Наследование (inheritance) - Благодаря наследованию один класс может унаследовать функциональность другого класса

Виртуальные методы и свойства - При наследовании нередко возникает необходимость изменить в классе-наследнике функционал метода, который был унаследован от 
	базового класса. В этом случае класс-наследник может переопределять методы и свойства базового класса. Те методы и свойства, которые мы хотим сделать 
	доступными для переопределения, в базовом классе помечается модификатором virtual. Такие методы и свойства называют виртуальными.
	А чтобы переопределить метод в классе-наследнике, этот метод определяется с модификатором override. Переопределенный метод в класе-наследнике должен иметь 
	тот же набор параметров, что и виртуальный метод в базовом классе.

Extension - позволяет без изменения исходного кода и создания наследников расширять классы новыми методами.
	Синтаксис записи такого метода:
	public static int MyMethod(this string str)
	{
	int count = 0;
	return count;
	}

Перегрузка - Язык программирования C# позволяет осуществлять перегрузку методов в классе. Означает использование одного имени для разных методов. 
	Фактически, перегружается имя метода. Все перегруженные методы носят одинаковое имя. Перегруженные методы отличаются параметрами. 
	Точнее говоря, тип параметров или количество параметров в перегруженных методах должны отличаться.

Классы и объекты - являются основным типом в языке C#. Класс предоставляет определение для динамически создаваемых экземпляров класса, которые также именуются объектами. 
	Классы поддерживают механизмы наследования и полиморфизма, которые позволяют создавать производные классы, расширяющие и уточняющие определения базовых классов. По сути класс представляет новый тип, который определяется пользователем. Класс определяется с помощью ключевого слова сlass:
	Конструктор - это метод, имя которого совпадает с именем его типа. Его сигнатура метода содержит только имя метода и список параметров, не содержит возвращаемый тип. Вызывается при создании нового объекта данного класса. Может выполнить инициализацию объекта.

Структуры - это сущности для хранения данных, как и классы могут содержать данные-члены и функции-члены. Но в отличие от классов, структуры являются типами значений и для них не выделяется память из кучи. Переменная типа структура напрямую хранит все свои данные, а переменная типа класс хранит ссылку на динамически выделяемый объект. Типы структуры не поддерживают определяемое пользователем наследование. Все типы структуры неявно наследуются от типа ValueType, который, в свою очередь, неявно наследуется от object.
	Although both class and structure are user-defined data types, they are different in several fundamental ways.
	A class is a reference type and stores on the heap. Struct, on the other hand, is a value type and is, therefore, stored on the stack.
	While the structure doesn’t support inheritance and polymorphism, the class provides support for both. A class can be of an abstract type, 
	but a structure can’t. All members of a class are private by default, while members of a struct are public by default. Another distinction 
	between class and struct is based on memory management. The former supports garbage collection while the latter doesn’t

Тернарный оператор( ?: ) - используется для сокращения объема кода. Им можно заменять простые операторы if-else. Тернарный оператор имеет такую структуру:
	логическое выражение ? выражение1 : выражение2
	Сначала вычисляется логическое выражение. Если оно истинно, то вычисляется выражение1, в противном случае - вычисляется выражение2.
	Пример: Console.WriteLine( a % 2 == 0 ? "Число чётное" : "Число нечётное" );

Лямбда-выражения - это упрощенная запись анонимных методов. Они позволяют создать емкие лаконичные методы, которые могут возвращать некоторое значение и которые можно передать в качестве параметров в другие методы.

Ковариантность - дает возможность приводить конкретные типы данных к общим в обобщенных интерфейсах.

Контвариантность - позволяет использовать общие типы взамен конкретных.

Делегат(delegate) - представляет ссылки на методы с конкретным списком параметров и типом возвращаемого значения. Делегаты позволяют использовать методы как сущности, сохраняя их в переменные и передавая в качестве параметров. Принцип работы делегатов близок к указателям функций из некоторых языков, но в отличие от указателей функций делегаты являются объектно-ориентированными и строго типизированными.
	Ковариантность делегата - предполагает возможность возвращать из метода объект, тип которого является производным от типа, возвращаемого делегатом.
	Контвариантность - предполагает возможность передавать в метод объект, тип которого является более универсальным по отношению к типу параметра делегата.

Action - Делегат Action является обобщенным, принимает параметры и возвращает значение void: public delegate void Action<T>(T obj);
	Данный делегат имеет ряд перегруженных версий. Каждая версия принимает разное число параметров: от Action<in T1> до Action<in T1, in T2,....in T16>. Таким образом можно передать до 16 значений в метод.

Анонимные методы - Анонимные методы используются для создания экземпляров делегатов.
	Анонимная функция, по существу, представляет собой безымянный кодовый блок, передаваемый конструктору делегата. 
	Преимущество анонимной функции состоит, в частности, в ее простоте. Благодаря ей отпадает необходимость объявлять отдельный метод, 
	единственное назначение которого состоит в том, что он передается делегату.
	delegate int Sum(int number);

Абстрактный класс - похож на обычный класс. Он также может иметь переменные, методы, конструкторы, свойства. Единственное, что при определении абстрактных классов используется ключевое слово abstract. Но главное отличие состоит в том, что мы не можем использовать конструктор абстрактного класса для создания его объекта. 
	Предоставляют следующие возможности: 
	Создавать экземпляры абстрактного класса нельзя.
    Абстрактный класс может содержать абстрактные методы и методы доступа.
    Изменить абстрактный класс с модификатором sealed нельзя, так как два этих модификатора имеют взаимоисключающие значения. 
	Модификатор sealed запрещает наследование класса, в то время как модификатор abstract указывает, что класс обязан иметь производные классы.
    Неабстрактный класс, производный от абстрактного класса, должен включать фактические реализации всех наследуемых абстрактных методов и методов доступа.

Интерфейс - тип, который определяет набор методов и свойств, но не реализует их. Затем этот функционал реализуют классы и структуры, которые применяют данные интерфейсы. Для определения интерфейса используется ключевое слово interface. Как правило, названия интерфейсов в C# начинаются с заглавной буквы I, например, IComparable, IEnumerable (так называемая венгерская нотация), однако это не обязательное требование, а больше стиль программирования. У интерфейса методы и свойства не имеют реализации, в этом они сближаются с абстрактными методами абстрактных классов. В данном случае интерфейс определяет метод Move, который будет представлять некоторое передвижение. Он не принимает никаких параметров и ничего не возвращает. Еще один момент в объявлении интерфейса: все его члены - методы и свойства не имеют модификаторов доступа, но фактически по умолчанию доступ public, так как цель интерфейса - определение функционала для реализации его классом. Поэтому весь функционал должен быть открыт для реализации.
	В целом интерфейсы могут определять следующие сущности: Методы, Свойства, Индексаторы, События.
	Однако интерфейсы не могут определять статические члены, переменные, константы.
	Интерфейс имеет следующие свойства:
    Интерфейс подобен абстрактному базовому классу, имеющему только абстрактные члены. Любой класс (или структура), реализующий интерфейс, должен реализовывать все его члены.
    Невозможно создать экземпляр интерфейса напрямую. Его члены реализуются любым классом (или структурой), реализующим интерфейс.
    Интерфейсы могут содержать события, индексаторы, методы и свойства.
    Интерфейсы не содержат реализацию методов.
    Класс или структура может реализовывать несколько интерфейсов. Класс может наследовать базовому классу и также реализовывать один или несколько интерфейсов.

Методы расширения - позволяют добавлять новые возможности к существующему типу. Вам не нужно вносить какие-либо изменения в существующий тип, просто принесите метод расширения в область видимости, и вы можете называть его как обычный метод экземпляра. Методы расширения должны быть объявлены в негенерированном, не вложенном, статическом классе

Статический класс - в основном такой же, как и нестатический класс, но имеется одно отличие: нельзя создавать экземпляры статического класса. Другими словами, нельзя использовать оператор new для создания переменной типа класса. Поскольку нет переменной экземпляра, доступ к членам статического класса осуществляется с использованием самого имени класса. Например, если есть статический класс, называемый UtilityClass, имеющий открытый статический метод с именем MethodA, вызов метода выполняется, как показано в следующем примере:  UtilityClass.MethodA(); Статические поля, методы, свойства относятся ко всему классу и для обращения к подобным членам класса необязательно создавать экземпляр класса. Память для статических переменных выделяется даже в том случае, если не создано ни одного объекта этого класса.

Статический конструктор - Кроме обычных конструкторов у класса также могут быть статические конструкторы. Статические конструкторы имеют следующие отличительные черты: Статические конструкторы не должны иметь модификатор доступа и не принимают параметров. Как и в статических методах, в статических конструкторах нельзя использовать ключевое слово this для ссылки на текущий объект класса и можно обращаться только к статическим членам класса. Статические конструкторы нельзя вызвать в программе вручную. Они выполняются автоматически при самом первом создании объекта данного класса или при первом обращении к его статическим членам (если таковые имеются)

LINQ (Language Integrated Query) - интегрированный язык запросов.

Явная загрузка (Explicit loading) - Явная загрузка, как и отложенная загрузка, не приводит к загрузке всех связанных данных в первом запросе. Но при этом, в отличие от отложенной загрузки, при вызове навигационного свойства связанного класса, эта загрузка не приводит к автоматическому извлечению связанных данных, вы должны явно вызвать метод Load(), если хотите загрузить связанные данные. Такой тип загрузки может использоваться в следующих случаях:
    Этот тип загрузки устраняет необходимость отмечать навигационные свойства класса модели как виртуальные. Для вас это может показаться не значительным изменением, но тот факт, что технология доступа к связанным данным при отложенной загрузке требует изменять ваши классы POCO модели, далека от идеальной.
    Вы можете работать с существующей библиотекой классов, где навигационные свойства не помечены как виртуальные, и вы не можете изменить эту библиотеку.
    В конце концов явная загрузка позволяет быть уверенным, что вы точно знаете, когда запросы отправляются в базу данных. Отложенная загрузка имеет характерную особенность генерировать много запросов к базе данных, с явной загрузкой очевидно, когда и где запросы выполняются в настоящее время.

Ленивая\Отложенная загрузка (Lazy loading) - заключается в том, что Entity Framework автоматически загружает данные, при этом не загружая связанные данные. Когда потребуются связанные данные Entity Framework создаст еще один запрос к базе данных. В контексте нашего примера это означает, что вы можете, например, загрузить первого заказчика из таблицы Customers и сохранить его в переменной customer. Затем вам может понадобиться узнать, какие заказы связаны с этим покупателем. Напомню, в классе модели Customer у нас определено навигационное свойство Orders. Если вы обратитесь к этому свойству (customer.Orders), то Entity Framework отправит запрос в базу данных на извлечение всех связанных с этим покупателем заказов.
	Связанные объекты не загружаются, пока мы не проведем их итерацию или не свяжем их с данными. По умолчанию LINQ to SQL загружает связанные объекты, используя Lazy Loading.

Прямая\безотложная загрузка (Eager loading) - позволяет указать в запросе какие связанные данные нужно загрузить при выполнении запроса. Благодаря этому, когда в коде вы будете ссылаться на связанную таблицу через навигационное свойство, SQL-запрос не будет направляться в базу данных, т.к. связанные данные уже будут загружены при первом запросе. В Entity Framework для этих целей используется метод Include(), которому передается делегат, в котором можно указать навигационное свойство, по которому данные должны загружаться при первом запросе. Этот метод является расширяющим для IQueryable.

при lazy loading требуется явное указание связанных сущностей при загрузке
при eager loading происходит загрузка всех связанных сущностей

Жизненный цикл зависимостей - Все объекты, которые используются в ASP.NET Core, имеет три варианта жизненного цикла.
	Singleton - объект сервиса создается при первом обращении к нему, все последующие запросы используют один и тот же ранее созданный объект сервиса, к примеру, компоненты middleware или сервисы, которые регистрируются с помощью метода AddSingleton().
	Scoped: для каждого запроса создается свой объект сервиса. То есть если в течение одного запроса есть несколько обращений к одному сервису, то при всех этих обращениях будет использоваться один и тот же объект сервиса.
	Transient - при каждом обращении к сервису создается новый объект сервиса. В течение одного запроса может быть несколько обращений к сервису, соответственно при каждом обращении будет создаваться новый объект. Подобная модель жизненного цикла наиболее подходит для легковесных сервисов, которые не хранят данных о состоянии

Паттерн - Основные шаблоны проектирования, реализованные еще в 1977 году, делятся на три основные категории: порождающие (creational), структурные (structural) и поведенческие (behavioral), каждый из которых имеет определенную роль. Кроме того, вы можете найти модели, специфичные для пользовательского интерфейса, а также расширенные шаблоны для архитектурных задач. Эти модели являются членами новой классификации, также известной как архитектурная классификация шаблонов (architectural design patterns classification).
	Самое главная причина — паттерны упрощают проектирование и поддержку программ.
    Проверенные решения.
    Ваш код более предсказуем когда вы используете готовые решения, вместо повторного изобретения велосипеда.
    Стандартизация кода.
    Вы делаете меньше ошибок, так как используете типовые унифицированные решения, в которых давно найдены все скрытые проблемы.
    Общий язык.
    Вы произносите название паттерна, вместо того, чтобы час объяснять другим членам команды какой подход вы придумали и какие классы для этого нужны.
	https://refactoring.guru/ru/design-patterns/csharp
	
Синглтон - порождающий паттерн, который гарантирует, что для определенного класса будет создан только один объект, а также предоставит к этому объекту точку доступа.

Factory - порождающий паттерн, который определяет интерфейс для создания объектов некоторого класса, но непосредственное решение о том, объект какого класса создавать происходит в подклассах. То есть паттерн предполагает, что базовый класс делегирует создание объектов классам-наследникам.
	Когда надо применять паттерн:
    Когда заранее неизвестно, объекты каких типов необходимо создавать
    Когда система должна быть независимой от процесса создания новых объектов и расширяемой: в нее можно легко вводить новые классы, объекты которых система должна создавать.
    Когда создание новых объектов необходимо делегировать из базового класса классам наследникам

Abstract factory — порождающий паттерн проектирования, который позволяет создавать семейства связанных объектов, не привязываясь к конкретным классам создаваемых объектов

Стратегия — поведенческий паттерн проектирования, который определяет семейство схожих алгоритмов и помещает каждый из них в собственный класс, после чего алгоритмы можно взаимозаменять прямо во время исполнения программы

Адаптер — структурный паттерн проектирования, который позволяет объектам с несовместимыми интерфейсами работать вместе, переводить данные из одного формата в другой

Фасад — структурный паттерн проектирования, который предоставляет простой интерфейс к сложной системе классов, библиотеке или фреймворку.

Template Method (Шаблонный метод) - поведенческий паттерн определяет основу алгоритма и позволяет подклассам переопределять некоторые шаги алгоритма, не изменяя его структуры в целом. Другими словами: ШМ — это каркас, в который наследники могут подставить реализации недостающих элементов. ШM позволяет создать небольшой каркас (framework) для решения определенной задачи, когда базовый класс описывает основные шаги решения, заставляя наследников предоставить недостающие куски головоломки.

Мост — структурный паттерн, который разделяет бизнес-логику или большой класс на несколько отдельных иерархий, которые потом можно развивать отдельно друг от друга.

Mediator (Посредник) - Уменьшает связанность системы за счёт того, что все зависимости уходят в один класс медиатор, а все остальные классы становятся независимы и отвечают только за логику, которую они выполняют. Таким образом, добавление новых классов становится проще, но с каждым новым классом логика медиатора сильно усложняется. С течением времени, если медиатор продолжает бесконтрольно разрастаться, то его становится очень тяжело поддерживать.
	Используется:
    Когда имеется множество взаимосвязаных объектов, связи между которыми сложны и запутаны.
    Когда необходимо повторно использовать объект, однако повторное использование затруднено в силу сильных связей с другими объектами.
	Преимущества:
    Устраняется сильная связанность между объектами Colleague
    Упрощается взаимодействие между объектами: вместо связей по типу "все-ко-всем" применяется связь "один-ко-всем"
    Взаимодействие между объектами абстрагируется и выносится в отдельный интерфейс
    Централизуется управления отношениями между объектами
	
Observer(Обозреватель) - поведенческий паттерн проектирования, который создаёт механизм подписки, позволяющий одним объектам следить и реагировать на события, происходящие в других объектах.
	- уменьшает связанность за счёт обращения зависимостей. Он хорошо применим, когда есть несколько источников событий и много слушателей, которые добавляются динамически. Другим хорошим примером использования этого паттерна является реактивное программирование, когда изменение состояния одного объекта приводит к изменению состояния всех зависимых от него объектов и так далее.

Наблюдатель — это поведенческий паттерн проектирования, который создаёт механизм подписки, позволяющий одним объектам следить и реагировать на события, происходящие в других объектах.

Mutex (mutual exclusion) - взаимное исключение или мьютекс является одним из классов в .NET Framework, позволяющих обеспечить синхронизацию среди множества процессов. Он очень похож на класс Monitor тем, что тоже допускает наличие только одного владельца. Только один поток может получить блокировку и иметь доступ к защищаемым мьютексом синхронизированным областям кода. В конструкторе класса Mutex указывается, должен ли мьютексом изначально владеть вызывающий поток, и его имя. Кроме того, конструктор позволяет получить информацию о том, существует ли уже такой класс.
	Мьютекс представляет собой взаимно исключающий синхронизирующий объект. Это означает, что он может быть получен потоком только по очереди. Мьютекс предназначен для тех ситуаций, в которых общий ресурс может быть одновременно использован только в одном потоке. Допустим, что системный журнал совместно используется в нескольких процессах, но только в одном из них данные могут записываться в файл этого журнала в любой момент времени. Для синхронизации процессов в данной ситуации идеально подходит мьютекс.
	
Repository (Репозиторий) - Одним из наиболее часто используемых паттернов при работе с данными является паттерн 'Репозиторий'. Репозиторий позволяет абстрагироваться от конкретных подключений к источникам данных, с которыми работает программа, и является промежуточным звеном между классами, непосредственно взаимодействующими с данными, и остальной программой.
	Допустим, у нас есть одно подключение к базе данных MS SQL Server. Однако, что если в какой-то момент времени мы захотим сменить подключение с MS SQL на другое - например, к бд MySQL или MongoDB. При стандартном подходе даже в небольшом приложении, осуществляющем выборку, добавление, изменение и удаление данных, нам бы пришлось сделать большое количество изменений. Либо в процессе работы программы в зависимости от разных условий мы хотим использовать два разных подключения. Таким образом, репозиторий добавляет программе гибкость при работе с разными типами подключений.	
	
CRUD - basic functions of a computer database(create, read, update, and delete)

Bootstrap - бесплатный набор инструментов для создания сайтов и веб-приложений. Включает в себя HTML- и CSS-шаблоны оформления для типографики, 
	веб-форм, кнопок, меток, блоков навигации и прочих компонентов веб-интерфейса, включая JavaScript-расширения.
	Bootstrap использует современные наработки в области CSS и HTML, поэтому необходимо быть внимательным при поддержке старых браузеров.

ORM (Object-Relational Mapping, объектно-реляционное отображение, или преобразование) - технология программирования, которая связывает базы данных с концепциями объектно-ориентированных языков программирования, создавая «виртуальную объектную базу данных». Существуют как проприетарные, так и свободные реализации этой технологии. Примеры Entity Framwork, ORM NHibernate, Linq2Sql, Gentle.Net, LightSpeed.

Hibernate - это библиотека с открытым исходным кодом (open source) для Java, предназначенная для решения задач ORM. Она представляет собой свободное программное обеспечение, распространяемое на условиях GNU Lesser General Public License. Hibernate Framework имеет легкий в использовании каркас для отображения объектно-ориентированной модели данных в традиционные реляционные базы данных и предоставляет стандартные средства JPA.

JPA (Java Persistence API) - Для сохранения Java-объектов в базе данных и чтения из БД следует использовать JPA. Программный интерфейс API, входящий с версии Java 5 в состав платформ Java SE и Java EE. Существует несколько реализаций интерфейса JPA, среди которых наиболее популярным является Hibernate.

Dapper - представляет собой технологию сопоставления (маппинга) результатов sql-запросов с классами c#. В этом плане Dapper немного похож на Entity Framework. В то же время за счет своей легковесности Dapper обеспечивает большую производительность и быстрее позволяет выполнять запросы, нежели Entity Framework.

WPF (Windows Presentation Foundation) - является часть экосистемы платформы .NET и представляет собой подсистему для построения графических интерфейсов. Если при создании традиционных приложений на основе WinForms за отрисовку элементов управления и графики отвечали такие части ОС Windows, как User32 и GDI+, то приложения WPF основаны на DirectX. В этом состоит ключевая особенность рендеринга графики в WPF: используя WPF, значительная часть работы по отрисовке графики, как простейших кнопочек, так и сложных 3D-моделей, ложиться на графический процессор на видеокарте, что также позволяет воспользоваться аппаратным ускорением графики. Одной из важных особенностей является использование языка декларативной разметки интерфейса XAML, основанного на XML: вы можете создавать насыщенный графический интерфейс, используя или декларативное объявление интерфейса, или код на управляемых языках C# и VB.NET, либо совмещать и то, и другое

WCF (Windows Communication Foundation) - это платформа для создания приложений, ориентированных на службы. С помощью WCF можно передавать данные в виде асинхронных сообщений из одной конечной точки службы в другую. Конечная точка службы может входить в постоянно доступную службу, размещаемую в IIS, или представлять службу, размещаемую 	в приложении. Конечная точка может быть клиентом службы, которая запрашивает данные от конечной точки службы. Сообщения могут представлять одиночный символ или одно слово, отправляемое в формате XML, или иметь вид сложного потока двоичных данных

SOLID (single responsibility, open-closed, Liskov substitution, interface segregation и dependency inversion) - мнемонический акроним, введённый Майклом Фэзерсом для первых пяти принципов, названных Робертом Мартином в начале 2000-х, которые означали пять основных принципов объектно-ориентированного программирования и проектирования. 
	S (Single Responsibility) Принцип единственной ответственности Этот принцип означает, что каждый класс или подобная структура в вашем коде должна отвечать только за одну цель. Все члены этого класса должны быть связаны одной целью. Наш класс не должен быть похож на швейцарский нож, в котором при изменении одного из членов нужно изменять весь инструментарий. Это не означает, что ваши классы должны содержать только один метод или свойство. Может быть много членов, если они относятся к одной задаче
	O (Open Closed Principle) Принцип открытости/закрытости. Главной концепцией данного принципа является то, что класс должен быть открыт для расширений, но закрыт от модификаций. Наш модуль должен быть разработан так, чтобы новая функциональность могла быть добавлена только при создании новых требований. «Закрыт для модификации» означает, что мы уже разработали класс, и он прошел модульное тестирование. Мы не должны менять его, пока не найдем ошибки. Как говорится, класс должен быть открытым только для расширений и в C# мы можем использовать для этого наследование
	L (Liskov Substitution Principle)Принцип подстановки Барбары Лисков «объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения правильности выполнения программы.» См. также контрактное программирование. Наследующий класс должен дополнять, а не изменять базовый.
	I (Interface Segregation Principle)Принцип разделения интерфейса «много интерфейсов, специально предназначенных для клиентов, лучше, чем один интерфейс общего назначения.»
	D (Dependency Inversion Principle)Принцип инверсии зависимостей «Зависимость на Абстракциях. Нет зависимости на что-то конкретное.» Мы должны держать высокоуровневые и низкоуровневые классы слабо связанными, насколько мы можем. Чтобы сделать это, нам нужно сделать их зависимыми от абстракций, а не друг от друга

KPI (Key Performance Indicator) - индикатор эффективности и успешности выполнения поставленных целей. Ключевой индикатор выполнения. Проще говоря, это показатель достижения результата в той или иной деятельности, который возможно оцифровать и измерить. Мотивационная система KPI - в русской версии иногда используют аббревиатуру КПЭ (ключевые показатели эффективности)

DI (Dependency injection) Внедрение зависимостей - это стиль настройки объекта, при котором поля объекта задаются внешней сущностью. Другими словами, объекты настраиваются внешними объектами. DI - это альтернатива самонастройке объектов. Dependency injection (DI) или внедрение зависимостей представляет механизм, который позволяет сделать взаимодействующие в приложении объекты слабосвязанными. Такие объекты связаны между собой через абстракции, например, через интерфейсы, что делает всю систему более гибкой, более адаптируемой и расширяемой. Нередко для установки зависимостей в подобных системах используются специальные контейнеры - IoC-контейнеры (Inversion of Control). Такие контейнеры служат своего рода фабриками, которые устанавливают зависимости между абстракциями и конкретными объектами и, как правило, управляют созданием этих объектов. И если раньше в ASP.NET 4 и других предыдщих версиях надо было использовать различные внешние IoC-контейнеры для установки зависимостей, такие как Ninject, Autofac, Unity, Windsor Castle, StructureMap, то ASP.NET Core уже имеет встроенный контейнер внедрения зависимостей, который представлен интерфейсом IServiceProvider. А сами зависимости еще называются сервисами, собственно поэтому контейнер можно назвать провайдером сервисов. Этот контейнер отвечает за сопоставление зависимостей с конкретными типами и за внедрение зависимостей в различные объекты

AutoFack (DI-контейнер) - is an addictive IoC container for .NET. It manages the dependencies between classes so that applications stay easy to change as they grow in size and complexity. This is achieved by treating regular .NET classes as components.
	это захватывающий контейнер IoC для .NET. Он управляет зависимостями между классами, так что приложения остаются легкими для изменения
	как они растут в размерах и сложности. Это достигается обработкой обычных классов .NET как компонентов.
	
Automapper - позволяет проецировать одну модель на другую, что позволяет сократить объемы кода и упростить программу.

IoC (Inversion of Control инверсия управления) - это некий абстрактный принцип, набор рекомендаций для написания слабо связанного кода. Суть которого в том, что каждый компонент системы должен быть как можно более изолированным от других, не полагаясь в своей работе на детали конкретной реализации других компонентов.
	
Node.js - среда выполнения JavaScript, основанная на JavaScript движке V8 из Chrome.
		— Пакетная экосистема Node.js, npm, является самой большой экосистемой библиотек с открытым исходным кодом в мире.
		— Node.js использует управляемую событиями, неблокирующую модель ввода-вывода, которая делает ее легкой и эффективной.

Vue - это прогрессивный фреймворк для создания пользовательских интерфейсов. В отличие от фреймворков-монолитов, Vue создан пригодным для постепенного внедрения. 
	Его ядро в первую очередь решает задачи уровня представления , что упрощает интеграцию с другими библиотеками и существующими проектами. С другой 
	стороны, Vue полностью подходит и для создания сложных одностраничных приложений (SPA, Single-Page Applications), если использовать его совместно с 
	современными инструментами и дополнительными библиотеками.	
	— JavaScript-фреймворк с открытым исходным кодом для создания пользовательских интерфейсов. Легко интегрируется в проекты с использованием других 
	JavaScript-библиотек. Может функционировать как веб-фреймворк для разработки одностраничных приложений в реактивном стиле. 

Kafka - целая платформа, обеспечивающая избыточность, достаточную для хранения абсурдно огромных объемов данных. 
	Здесь предоставляется шина сообщений с колоссальной пропускной способностью, на которой можно в реальном времени обрабатывать 
	абсолютно все проходящие через нее данные. 
	Проект достаточно зрелый, и среди тех, кто его активно использует, много гигантов IT индустрии: LinkedIn, Netflix, Yahoo, Twitter, 
	Pinterest, и другие. Проект стал невероятно популярным во многом благодаря своим неоспоримым преимуществам: легкость настройки, 
	масштабируемость, высокая пропускная способность и надежность. 	

Контейнер - Окружение со всеми необходимыми зависимостями для необходимого запуска приложения на любой операционной системе.

Docker(Контейнеризация) -  подход к разработке программного обеспечения, при котором приложение или служба, их зависимости и конфигурация (абстрактные файлы манифеста развертывания) упаковываются вместе в образ контейнера. Контейнерное приложение может тестироваться как единое целое и развертываться как экземпляр образа контейнера в операционной системе (ОС) узла. Так же как обычные контейнеры позволяют перевозить любые грузы на корабле, поезде или грузовике, программные контейнеры выступают в качестве стандартных модулей для развертывания программного обеспечения, которые могут содержать различный код и зависимости. Контейнеризация программного обеспечения позволяет разработчикам и ИТ-специалистам развертывать его в разных средах без каких-либо изменений или с минимальными изменениями.
	
	Контейнеры также изолируют приложения друг от друга в общей операционной системе. Контейнерные приложения выполняются на основе узла контейнеров, который в 
	свою очередь работает в операционной системе (Linux или Windows). Поэтому контейнеры требуют гораздо меньше ресурсов, чем образы виртуальных машин.
	Каждый контейнер может вмещать целое веб-приложение или службу.

Kubernetes (от греч. κυβερνήτης - «кормчий», «рулевой», часто также используется нумероним K8s) - открытое программное обеспечение для автоматизации развёртывания, масштабирования контейнеризированных приложений и управления ими. Поддерживает основные технологии контейнеризации, включая Docker, rkt, также возможна поддержка технологий аппаратной виртуализации. Оригинальная версия была разработана компанией Google для внутренних нужд.

Sql (structured query language) - структурированный язык запросов. - это декларативный язык запросов к данным в определённом типе баз данных (реляционном).
	- декларативный язык программирования, применяемый для создания, модификации и управления данными в реляционной базе данных, управляемой соответствующей 
	системой управления базами данных.

Реляционная база данных - это связанная информация, представленная в виде двумерных таблиц. Представьте себе адресную книгу. Она содержит множество строк, каждая из которых соответствует данному индивидууму. Для каждого из них в ней представлены некоторые независимые данные, например, имя, номер телефона, адрес. Представим такую адресную книгу в виде таблицы, содержащей строки и столбцы. Каждая строка (называемая также записью) соответствует определенному индивидууму, каждый столбец содержит значения соответствующего типа данных: имя, номер телефона и адрес, представленных в каждой строке. 
	Нереляционная база данных - это база данных, в которой в отличие от большинства традиционных систем баз данных не используется табличная схема строк и столбцов. В этих базах данных применяется модель хранения, оптимизированная под конкретные требования типа хранимых данных. Например, данные могут храниться как простые пары "ключ - значение", документы JSON или граф, состоящий из ребер и вершин.

SQL - язык, если точнее, множество стандартов языка. Вы можете написать запрос на SQL, но исполнить его может только конкретная СУБД.
MySQL / MariaDB / PostgreSQL - различные реляционные СУБД, выполняющие запросы.
PhpMyAdmin / MySQL Workbench / DBeaver - приложения, для удобной работы с различными СУБД.

MySQL и MS SQL - это две системы баз данных.
	MYSQL является открытым исходным кодом, в то время как MS SQL является закрытым источником
	MYSQL бесплатно использовать, а MS SQL требует оплаты лицензии на использование
	MySQL использует меньшее дисковое пространство; MS SQL использует более высокое дисковое пространство
	MySQL крест совместим с другими платформами, такими как Unix и Linux
	MS SQL несовместим с другими платформами
	MySQL не использует внешние ключи, в то время как MS SQL поддерживает их использование.

MongoDB - документоориентированная система управления базами данных, не требующая описания схемы таблиц. Считается одним из классических примеров NoSQL-систем, использует JSON-подобные документы и схему базы данных. Применяется в веб-разработке, в частности, в рамках JavaScript-ориентированного стека MEAN. MongoDB реализует новый подход к построению баз данных, где нет таблиц, схем, запросов SQL, внешних ключей и многих других вещей, которые присущи объектно-реляционным базам данных. Со времен динозавров было обычным делом хранить все данные в реляционных базах данных (MS SQL, MySQL, Oracle, PostgresSQL). При этом было не столь важно, а подходят ли реляционные базы данных для хранения данного типа данных или нет. В отличие от реляционных баз данных MongoDB предлагает документо-ориентированную модель данных, благодаря чему MongoDB работает быстрее, обладает лучшей масштабируемостью, ее легче использовать.

Внешние ключи (FOREIGN KEY) - создается между двумя таблицами, чтобы связать строки одной таблицы со строками другой

Tarantool - открытая система управления базой данных с неблокирующим сервером приложений на Lua.
	База данных обладает высокой скоростью работы по сравнению с традиционными СУБД, обладая теми же свойствами: 
	персистентности, транзакционности ACID, репликации master-slave, master-master.

Join - Присоединение таблиц в запросах. Базовый инструмент в работе с базами данных. Оператор MySQL LEFT JOIN позволяет запрашивать данные из двух или более таблиц базы данных. Он является необязательной частью оператора SELECT, которая указывается после FROM.

Индекс - это объект базы данных, который представляет собой структуру данных, состоящую из ключей, построенных на основе одного или нескольких столбцов таблицы или представления, и указателей, которые сопоставляются с местом хранения заданных данных. Индексы предназначены для более быстрого получения строк из таблицы, другими словами, индексы обеспечивают быстрый поиск данных в таблице, что значительно повышает производительность запросов и приложений. Индексы также могут быть использованы и для обеспечения уникальности строк таблицы, гарантируя тем самым целостность данных.
	
	Типы индексов в Microsoft SQL Server:
    Кластеризованный (Clustered) – это индекс, который хранит данные таблицы в отсортированном, по значению ключа индекса, виде. У таблицы может быть только один кластеризованный индекс, так как данные могут быть отсортированы только в одном порядке. По возможности каждая таблица должна иметь кластеризованный индекс, если у таблицы нет кластеризованного индекса, такая таблица называется «кучей». Кластеризованный индекс создается автоматически при создании ограничений PRIMARY KEY (первичный ключ) и UNIQUE, если до этого кластеризованный индекс для таблицы еще не был определен. В случае создания кластеризованного индекса для таблицы (кучи), в которой есть некластеризованные индексы, то после создания все их необходимо перестроить.
    Некластеризованный (Nonclustered) – это индекс, который содержит значение ключа и указатель на строку данных, содержащую значение этого ключа. У таблицы может быть несколько некластеризованных индексов. Создаваться некластеризованные индексы могут как на таблицах с кластеризованным индексом, так и без него. Именно этот тип индекса используется для повышения производительности часто используемых запросов, так как некластеризованные индексы обеспечивают быстрый поиск и доступ к данным по значениям ключа;
    Фильтруемый (Filtered) – это оптимизированный некластеризованный индекс, который использует предикат фильтра для индексирования части строк в таблице. Если хорошо спроектировать такой тип индекса, то он может повысить производительность запросов, а также снизить затраты на обслуживание и хранение индексов по сравнению с полнотабличными индексами;
    Уникальный (Unique) – это индекс, который обеспечивает отсутствие повторяющихся (одинаковых) значений ключа индекса, гарантируя тем самым уникальность строк по данному ключу. Уникальными могут быть как кластеризованные, так и некластеризованные индексы. Если создавать уникальный индекс по нескольким столбцам, индекс гарантирует уникальность каждой комбинации значений в ключе. При создании ограничений PRIMARY KEY или UNIQUE SQL сервер автоматически создает уникальный индекс для ключевых столбцов. Уникальный индекс может быть создан только в том случае, если у таблицы на текущий момент отсутствуют дублирующие значения по ключевым столбцам;
    Колоночный (Columnstore) – это индекс, основанный на технологии хранения данных в виде столбцов. Данный тип индекса эффективно использовать для больших хранилищ данных, поскольку он может увеличить производительность запросов к хранилищу до 10 раз и также до 10 раз уменьшить размер данных, так как данные в Columnstore индексе сжимаются. Существуют как кластеризованные колоночные индексы, так и некластеризованные;
    Полнотекстовый (Full-text) – это специальный тип индекса, который обеспечивает эффективную поддержку сложных операций поиска слов в символьных строковых данных. Процесс создания и обслуживания полнотекстового индекса называется «заполнением». Существует такие типы заполнения как: полное заполнение и заполнение на основе отслеживания изменений. По умолчанию SQL сервер полностью заполняет новый полнотекстовый индекс сразу после его создания, но на это может потребоваться значительный объем ресурсов, в зависимости от размеров таблицы, поэтому есть возможность откладывать полное заполнение. Заполнение на основе отслеживания изменений используется для обслуживания полнотекстового индекса после его первоначального полного заполнения;
    Пространственный (Spatial) – это индекс, который обеспечивает возможность более эффективного использования конкретных операций на пространственных объектах в столбцах с типом данных geometry или geography. Данный тип индекса может быть создан только для пространственного столбца, также таблица, для которой определяется пространственный индекс, должна содержать первичный ключ (PRIMARY KEY);
    XML – это еще один специальный тип индекса, который предназначен для столбцов с типом данных XML. Благодаря XML-индексу повышается эффективность обработки запросов к XML столбцам. Существует два вида XML-индекса: первичные и вторичные. Первичный XML-индекс индексирует все теги, значения и пути, хранимые в XML столбце. Он может быть создан, только если у таблицы есть кластеризованный индекс по первичному ключу. Вторичный XML-индекс может быть создан, только если у таблицы есть первичный XML-индекс и используется он для повышения производительности запросов по определенному типу обращения к XML-столбцу, в связи с этим существует несколько типов вторичных индексов: PATH, VALUE и PROPERTY;
    Также существуют специальные индексы для таблиц, оптимизированных для памяти (In-Memory OLTP) такие как: Хэш (Hash) индексы и некластеризованные индексы, оптимизированные для памяти, которые создаются для сканирования диапазона и упорядоченного сканирования.

Констрейнты SQL - это набор правил, применённый к данным колонок в таблице. Они используются для ограничения типов данных, которые могут храниться в таблице. 
	Это также обеспечивает точность и читабельность данных в БД. Значения могут применять как к колонке, так и ко всей таблице.

Триггеры - хранимая процедура, которая не вызывается непосредственно, а исполняется при наступлении определенного события ( вставка, удаление, обновление строки ).
	after update указывает, что триггер срабатывает после выполнения оператора UPDATE.
	
Триггеры - специальный тип хранимой процедуры, которая вызывается автоматически при выполнении определенного действия над таблицей или представлением, в частности, при добавлении, изменении или удалении данных, то есть при выполнении команд INSERT, UPDATE, DELETE.	
	
Транзакции - позволяют выполнять ряд операций в виде одного целостного пакета. И если хотя бы одна из этих операций завершится неудачно, то произойдет откат выполнения остальных операций.
	
Уровни изолированности транзакций - Read uncommitted, Read committed & Repeatable read
	Read uncommitted - уровень, имеющий самую плохую согласованность данных, но самую высокую скорость выполнения транзакций. Название уровня говорит само за себя — каждая транзакция видит незафиксированные изменения другой транзакции (феномен грязного чтения)
	Read committed - Для этого уровня параллельно исполняющиеся транзакции видят только зафиксированные изменения из других транзакций. Таким образом, данный уровень обеспечивает защиту от грязного чтения.
	Repeatable read - Уровень, позволяющий предотвратить феномен неповторяющегося чтения. Т.е. мы не видим в исполняющейся транзакции измененные и удаленные записи другой транзакцией. Но все еще видим вставленные записи из другой транзакции. Чтение фантомов никуда не уходит.

Уровень изоляции транзакции      ||"Грязных" операций чтения||Неповторяемые операции чтения||Фантомы
Уровень изоляции read uncommitted||	X 	X 	X
Уровень изоляции read committed  ||	-- 	X 	X
Уровень изоляции repeatable read ||	-- 	-- 	X
Упорядочиваемый уровень изоляции ||	-- 	-- 	--

"Грязные" операции чтения - «Грязное» чтение происходит, когда транзакция считывает данные, которые еще не были зафиксированы. Например, транзакция 1 обновляет строку. Транзакция 2 считывает обновленную строку до того, как транзакция 1 зафиксирует обновление. Если транзакция 1 выполняет откат изменений, то транзакция 2 будет считать данные, которые никогда не существовали.

Неповторяемые операции чтения - происходит, когда транзакция дважды считывает одну и ту же строку, но каждый раз получает разные данные. Например, транзакция 1 считывает строку. Транзакция 2 обновляет или удаляет эту строку и фиксирует обновление или удаление. Если транзакция 1 пересчитывает строку, она получает различные значения строки или обнаруживает, что строка была удалена.

Фантомы — это строка, которая соответствует условиям поиска, но изначально не отображается. Например, транзакция 1 считывает набор строк, удовлетворяющих некоторым условиям поиска. Транзакция 2 создает новую строку (посредством обновления или вставки), которая соответствует условиям поиска для транзакции 1. Если транзакция 1 выполняет инструкцию, которая считывает строки, она получает другой набор строк.

Микросервисы\Распределенная транзакция - это подход, при котором единое приложение строится как набор небольших сервисов, каждый из которых работает в собственном процессе и коммуницирует с остальными используя легковесные механизмы, как правило HTTP. Эти сервисы построены вокруг бизнес-потребностей и развертываются независимо с использованием полностью автоматизированной среды. Существует абсолютный минимум централизованного управления этими сервисами. Сами по себе эти сервисы могут быть написаны на разных языках и использовать разные технологии хранения данных.
	Для того, чтобы начать рассказ о стиле микросервисов, лучше всего сравнить его с монолитом (monolithic style): приложением, построенном как единое целое. Enterprise приложения часто включают три основные части: пользовательский интерфейс (состоящий как правило из HTML страниц и javascript-а), база данных (как правило реляционной, со множеством таблиц) и сервер. Серверная часть обрабатывает HTTP запросы, выполняет доменную логику, запрашивает и обновляет данные в БД, заполняет HTML страницы, которые затем отправляются браузеру клиента. 
	Любое изменение в системе приводит к пересборке и развертыванию новой версии серверной части приложения

Распределенная транзакция — это транзакция, затрагивающая несколько ресурсов. Для фиксации распределенной транзакции все участники должны гарантировать, что любое изменение данных будет постоянным. Изменения должны сохраняться даже в случае фатального сбоя системы или других непредвиденных событий. Если хоть один из участников не сможет предоставить такую гарантию, вся транзакция завершится с ошибкой и будет выполнен откат любых изменений данных внутри области транзакции.	

Сага - представляет собой набор локальных транзакций. Каждая локальная транзакция обновляет базу данных и публикует сообщение или событие, инициируя следующую 
	локальную транзакцию в саге. Если транзакция завершилась неудачей, например, из-за нарушения бизнес правил, тогда сага запускает компенсирующие транзакции, 
	которые откатывают изменения, сделанные предшествующими локальными транзакциями.

Двухфазный коммит - это коммит из двух фаз. Первая фаза - атомарная операция по проверке возможности начала транзакции и блокировки участников коммита. Вторая фаза - сбор ответов от участников и применение транзакции с отпусканием блокировок. Отказоустойчивый коммит - коммит, который продолжает исполняться даже при условии отказа одного или нескольких участников коммита.

Монолитный сервер - вся логика по обработке запросов выполняется в единственном процессе, при этом вы можете использовать возможности вашего языка программирования для разделения приложения на классы, функции и namespace-ы. Вы можете запускать и тестировать приложение на машине разработчика и использовать стандартный процесс развертывания для проверки изменений перед выкладыванием их в продакшн. Вы можете масштабировать монолитное приложения горизонтально путем запуска нескольких физических серверов за балансировщиком нагрузки. Один из главных минусов монолтиа - любые изменения, даже самые небольшие, требуют пересборки и развертывания всего монолита

Микросервисы - архитектурный стиль, подход, при котором единое приложение строится как набор небольших сервисов, каждый из которых работает в собственном процессе и коммуницирует с остальными используя легковесные механизмы, как правило HTTP. Эти сервисы построены вокруг бизнес-потребностей и развертываются независимо с использованием полностью автоматизированной среды. Существует абсолютный минимум централизованного управления этими сервисами. Сами по себе эти сервисы могут быть написаны на разных языках и использовать разные технологии хранения данных

Domain-Driven Design (DDD). DDD предлагает делить сложную предметную область на несколько контекстов и мапить отношения между ними. Этот процесс полезен как для монолитной, так и для микросервисной архитектур, но между сервисами и контекстами существует естественная связь, которая помогает прояснять и поддерживать границы контекстов.

ETL (Extract, Transform, Load) – извлечение, преобразование, загрузка.

IDE (Integrated Development Environment) - Интегрированная среда разработки система программных средств, используемая программистами для разработки 
программного обеспечения.

MSDN (Microsoft Developers Network) - Cеть для разработчиков, использующих платформу Microsoft. Программа Microsoft по поддержке разработчиков. Также обозначает совокупность 
	технической документации по всем выпускаемым ею продуктам. Осуществляется в виде подписки на одну из трех серий (MSDN Library, Professional и Universal) компакт дисков, 
	содержащих информацию разного уровня. Кроме того, содержимое MSDN Library доступно на сайте в онлайн режиме.

MVC (model view controller) - Платформа ASP.NET MVC представляет собой фреймворк для создания сайтов и веб-приложений с помощью реализации паттерна MVC.
	MVC  предполагает разделение приложения на три компонента:
	Контроллер (controller) представляет класс, обеспечивающий связь между пользователем и системой, представлением и хранилищем данных. Он получает вводимые пользователем 
	данные и обрабатывает их. И в зависимости от результатов обработки отправляет пользователю определенный вывод, например, в виде представления.
	Представление (view) - это собственно визуальная часть или пользовательский интерфейс приложения. Как правило, html-страница, которую пользователь видит, зайдя на сайт.
	Модель (model) представляет класс, описывающий логику используемых данных.

GraphQL - синтаксис, который описывает как запрашивать данные, и, в основном, используется клиентом для загрузки данных с сервера. GraphQL имеет три основные характеристики:
    Позволяет клиенту точно указать, какие данные ему нужны. 
	Облегчает агрегацию данных из нескольких источников.
    Использует систему типов для описания данных.
	Фактически, GraphQL находится между клиентом и одним или несколькими источниками данных; он принимает запросы клиентов и возвращает необходимые данные в соответствии с 
	переданными инструкциями.

TypeScript - строго типизированный и компилируемый язык, чем, возможно, будет ближе к программистам Java, C# и других строго типизированных языков. Хотя на выходе компилятор создает все тот же JavaScript, который затем исполняется браузером. Однако строгая типизация уменьшает количество потенциальных ошибок, которые могли бы возникнуть при разработке на JavaScript.
	- реализует многие концепции, которые свойственны объектно-ориентированным языкам, как, например, наследование, полиморфизм, инкапсуляция и модификаторы доступа и так далее.
	- позволяет быстрее и проще писать большие сложные комплексные программы, соответственно их легче поддерживать, развивать, масштабировать и тестировать, чем на стандартном JavaScript.
	TypeScript отличается от JavaScript возможностью явного статического назначения типов, поддержкой использования полноценных классов (как в традиционных объектно-ориентированных языках), 
	а также поддержкой подключения модулей, что призвано повысить скорость разработки, облегчить читаемость, рефакторинг и повторное использование кода, помочь осуществлять поиск ошибок 
	на этапе разработки и компиляции, и, возможно, ускорить выполнение программ.

Log4net - логгер для .net-приложений, позволяющий выводить любые сообщения в файл, несколько файлов, в БД или еще куда-нибудь. Развивается как opensource-проект и, как и многие проекты, хостится на гитхабе. Кроме того, он является кроссплатформенным

Unity Test - (в идеале) предназначен для тестирования отдельного «юнита» кода. Состав «юнита» может варьироваться, но важно помнить, что юнит-тестирование должно тестировать ровно один «элемент» за раз. Необходимо создавать для проверки того, что небольшой логический фрагмент кода в конкретном сценарии выполняется именно так, как вы ожидаете. 

AsQueryable(IEnumerable) - Преобразовывает коллекцию IEnumerable в объект IQueryable.

yield - Используется в блоке итератора для предоставления значения объекта перечислителя.

Рефлексия - представляет собой процесс выявления типов во время выполнения приложения. Каждое приложение содержит набор используемых классов, интерфейсов, а 
	также их методов, свойств и прочих кирпичиков, из которых складывается приложение. И рефлексия как раз и позволяет определить все эти составные элементы приложения.

QA (quality assurance) - обеспечение качества.

DevOps (development и operations) - технология (методология) активного взаимодействия специалистов по разработке со специалистами по информационно-технологическому обслуживанию 
	и взаимную интеграцию их рабочих процессов друг в друга для обеспечения качества продукта. Предназначена для эффективной организации создания и обновления программных продуктов 
	и услуг. Основана на идее тесной взаимозависимости разработки и эксплуатации программного обеспечения. 

Условная компиляция - Директивы условной компиляции позволяют в зависимости от условий добавить в файл определенный код. Прежде всего это такие директивы как 
	#if/#else/#endif, действие которых напоминает условную конструкцию if

Swagger - это фреймворк и спецификация для определения REST APIs в формате, дружественном к пользователю и компьютеру (в нашем случае JSON или YAML).
	Он дает возможность не только интерактивно просматривать спецификацию, но и отправлять запросы – так называемый Swagger UI.

Декоратор (Decorator) - представляет структурный шаблон проектирования, который позволяет динамически подключать к объекту дополнительную функциональность.
	Для определения нового функционала в классах нередко используется наследование. Декораторы же предоставляет наследованию более гибкую альтернативу, поскольку 
	позволяют динамически в процессе выполнения определять новые возможности у объектов.
	
Наблюдатель (Observer) представляет поведенческий шаблон проектирования, который использует отношение "один ко многим". В этом отношении есть один наблюдаемый объект и множество наблюдателей. И при изменении наблюдаемого объекта автоматически происходит оповещение всех наблюдателей.

Издатель-подписчик (publisher-subscriber) - поведенческий шаблон проектирования передачи сообщений, в котором отправители сообщений, именуемые издателями , напрямую не привязаны программным кодом отправки сообщений к подписчикам (англ. subscribers). Вместо этого сообщения делятся на классы и не содержат сведений о своих подписчиках, если таковые есть. Аналогичным образом подписчики имеют дело с одним или несколькими классами сообщений, абстрагируясь от конкретных издателей.
	Представляет собой расширение шаблона наблюдатель, в который добавлено описание канала событий , специально предназначенного для оповещения о событиях. 
	
Константы - Константы предназначены для описания таких значений, которые не должны изменяться в программе. Для определения констант используется ключевое слово const:
	При использовании констант надо помнить, что объявить мы их можем только один раз и что к моменту компиляции они должны быть определены.

readonly(поля для чтения) - можно инициализировать при их объявлении либо на уровне класса, либо инициилизировать и изменять в конструкторе. Инициализировать или изменять их значение в других местах нельзя, можно только считывать их значение

Чем отличаются константы и доступные только для чтения поля?
    "Доступные только для чтения поля инициализируются во время компиляции, константы - во время выполнения"
    "Константы инициализируются во время компиляции, доступные только для чтения поля - во время выполнения"
	
Атрибуты - в .NET представляют специальные инструменты, которые позволяют встраивать в сборку дополнительные метаданные. Атрибуты могут применяться как ко всему типу (классу, интерфейсу и т.д.), так и к отдельным его частям (методу, свойству и т.д.). Основу атрибутов составляет класс System.Attribute, от которого образованы все остальные классы атрибутов.	
	Прим: [AgeValidation(18)], [Serializable], [NonSerialized].
	
CLR (Common Language Runtime общеязыковая исполняющая среда) - исполняющая среда для байт-кода CIL (MSIL), в которой компилируются программы, написанные на .NET-совместимых языках программирования (C#, Managed C++, Visual Basic .NET, F# и прочие). CLR является одним из основных компонентов пакета Microsoft .NET Framework.  CLR компилирует код приложения на языке CIL (реализация компиляции которого компанией Microsoft называется MSIL) во время его исполнения, а также предоставляет MSIL-программам  (а следовательно, и программам, написанным на языках высокого уровня, поддерживающих .NET Framework) доступ к библиотеке классов .NET Framework, или так называемой .NET FCL (англ. Framework Class Library). 
	 
ODBC (Open Database Connectivity) - это программный интерфейс (API) доступа к базам данных, разработанный фирмой Microsoft, в сотрудничестве с Simba Technologies на основе спецификаций Call Level Interface (CLI), который разрабатывался организациями SQL Access Group, X/Open и Microsoft.
	
SAP HANA - база данных, работающая на технологи In-memory. Это комбинация оборудования и ПО, спроектированная, чтобы обрабатывать большие массивы данных в реальном времени, используя технологию In-memory. Она сочетает в себе технологию постолбцовой и построчной обработки данных. Данные находятся в основной памяти (RAM), а не на жестком диске. Эта технология главным образом подходит для обработки и аналитики данных в режиме реального времени, разработки и развертывании приложений, так же работающих в реальном времени. Понятие «База данных In-memory» означает, что все данные хранятся в оперативной памяти (RAM). Теперь не затрачивается время на загрузку данных с жесткого диска или на обработку данных, часть которых хранится на жестком диске, а часть в оперативной памяти. Все данные хранятся в памяти все время, что придает процессору дополнительную быстроту при работе с данными. SAP HANA оснащен разветвленной средой обработки процессов, которая поддерживает как обработку графической, так и текстовой информации одной системой. Он также обеспечивает значительное ускорение обработки процессов, работу с большими массивами данных и глубокий анализ текста.
	
In-Memory Computing - Вычисление в оперативной памяти. Высокопроизводительные распределенные системы, предназначенные для хранения и обработки данных в оперативной памяти в реальном времени. Обеспечивают производительность на порядки быстрее, чем системы, основанные на дисках. Ускоряют обработку больших объемов данных, поэтому по мере роста такого явления как Big Data приобретают все большую популярность среди предприятий.	

ADO.NET - часть фреймфорка .NET, предоставляющая доступ к данным для приложений, основанных на Microsoft .NET. Не является развитием более ранней технологии ADO, а является самостоятельной технологией. Классы ADO.NET находятся в сборке System.Data.dll Многие другие части фреймворка .Net, как и сторонние библиотеки, используют те или иные части ADO.NET. Например:
    Части .Net Framework, Entity Framework, Linq to SQL, Сторонние библиотеки.
	 - часть Microsoft .NET Framework, т.е. набор средств и слоев, позволяющих приложению легко управлять и взаимодействовать со своим файловым или серверным хранилищем данных. В NET Framework библиотеки ADO.NET находится в пространстве имени System.Data. Эти библиотеки обеспечивают подключение к источникам данных, 
	выполнении команд, а также хранилище, обработку и выборку данных. ADO.NET отличается от предыдущих технологий доступа к данным тем, что она позволяет взаимодействовать с базой данных автономно, с помощью от базы кеша данных.

Фреймворк - программная платформа, определяющая структуру программной системы; программное обеспечение, облегчающее разработку и объединение разных компонентов 
	большого программного проекта.
	
Set - Интерфейс расширяет интерфейс Collection и представляет набор уникальных элементов. Set не добавляет новых методов, только вносит изменения унаследованные. 
	В частности, метод add() добавляет элемент в коллекцию и возвращает true, если в коллекции еще нет такого элемента.

HashSet - представляет хеш-таблицу. Он наследует свой функционал от класса AbstractSet, а также реализует интерфейс Set.
	Хеш-таблица представляет такую структуру данных, в которой все объекты имеют уникальный ключ или хеш-код. Данный ключ позволяет уникально идентифицировать объект в таблице.

Credential - учетные данные, полномочия, верительные грамоты, мандат, явки, пароли.

Credential Guard (Защита учётной записи) - изолирует секреты с помощью основанных на виртуализации технологий, так что только привилегированные системы могут получить к ним доступ.
	Предоставляет следующие возможности:
    Безопасность оборудования. Повышает безопасность учётных записей производного домена, используя для этого преимущества функций безопасности платформы, включая безопасную загрузку и виртуализацию.
    Безопасность на основе виртуализации. Службы Windows, которые управляют учётными данными производного домена и другими секретами, выполняются в защищённой среде, изолированной от операционной системы.
    Улучшенная защита от самых современных постоянных угроз. Обеспечивает учётные данные производных доменов с помощью безопасности на основе виртуализации. Блокирует атаки на учётные данные и инструменты, используемые в многих других атаках. Вредоносные программы, выполняющимися в ОС с административными привилегиями не могут извлечь секреты, которые находятся под защитой безопасности на основе виртуализации.
    Управляемость. Управление с помощью групповой политики, WMI, из командной строки и Windows PowerShell.

Interseptor - перехватчик запросов.

Query Builder - конструктор запросов предоставляет удобный, выразительный интерфейс для создания и выполнения запросов к базе данных. 
	Он может использоваться для выполнения большинства типов операций и работает со всеми подерживаемыми СУБД.
	
CallBack - функция обратного вызова, передача исполняемого кода в качестве одного из параметров другого кода.
	Обратный вызов позволяет в функции исполнять код, который задаётся в аргументах при её вызове. Этот код может быть определён в других контекстах программного кода и быть недоступным для прямого вызова из этой функции. Некоторые алгоритмические задачи в качестве своих входных данных имеют не только числа или объекты, но и действия (алгоритмы), которые естественным образом задаются как обратные вызовы. 
	
Angular Material - AngularJS Material is an implementation of Google's Material Design Specification (2014-2017). This project provides a set of reusable, well-tested, and accessible UI components for AngularJS developers.

Go (Golang) - компилируемый многопоточный язык программирования, разработанный внутри компании Google. разрабатывался как язык программирования для создания высокоэффективных программ, работающих на современных распределённых системах и многоядерных процессорах. Он может рассматриваться как попытка создать замену языкам Си и C++ с учётом изменившихся компьютерных технологий и накопленного опыта разработки крупных систем. По словам Роба Пайка, «Go был разработан для решения реальных проблем, возникающих при разработке программного обеспечения в Google». В качестве основных таких проблем он называет:
    медленную сборку программ;
    неконтролируемые зависимости;

API(Application Program Interface) - или программный интерфейс приложения. Это определенный набор протоколов, подпрограмм и инструментов для создания программных приложений. Проще говоря, это инструментарий разработчика. Получается программный интерфейс приложений. Или, точнее, написания приложений. А попросту - библиотека. Собственно, используется для того, чтобы написать программу, выполняющую те или иные, нужные нам действия.
	- Это набор правил, позволяющий программам «общаться» друг с другом. Разработчик создает API на сервере и позволяет клиентам обращаться к нему.

REST (representational state transfer) - «передача состояния представления» или, лучше сказать, представление данных в удобном для клиента формате.
	– это архитектурный подход, определяющий, как API должны выглядеть. Этому набору правил и следует разработчик при создании своего приложения. Одно из этих правил гласит, что при обращении к определенному адресу, вы должны получать определенный набор данных (ресурс).
	принципы:
    1)Give every “thing” an ID.
    Очччень желательно.

    2)Link things together.
    Например, в страницу (представление) о Mercedes C218 хорошо бы добавить ссылку на страницу конкретно о двигателе данной модели, 
	чтобы желающие могли сразу туда перейти, а не тратить время на поиск этой самой страницы.

    3)Use standard methods.
    Имеется в виду, экономьте свои силы и деньги заказчика, используйте стандартные методы HTTP, например GET
    http://www.example.com/cars/00345
    для получения данных вместо определения собственных методов вроде getCar?id=00345.

    4)Resources can have multiple representations.
    Одни и те же данные можно вернуть в XML или JSON для программной обработки или обернутыми в красивый дизайн для просмотра человеком.

    5)Communicate statelessly.
    Да, RESTful сервис должен быть как идеальный суд – его не должно интересовать ни прошлое подсудимого (клиента), ни будущее – 
	он просто выносит приговор (отвечает на запрос).
	
	Для разграничения действий с ресурсами на уровне HTTP-методов и были придуманы следующие варианты:
    GET — получение ресурса
    POST — создание ресурса
    PUT — обновление ресурса
    DELETE — удаление ресурса

Класс - это структурированный блок кода, написанный определенным образом, чтобы обозначить набор или целую категорию вещей. Люди используют классы, чтобы создавать больше вещей. Они создают новые классы, присваивают им значения и используют методы (также известные как функции) для работы с экземплярами класса

SOAP (Simple Object Access Protocol простой протокол доступа к объектам) - это целое семейство протоколов и стандартов, откуда напрямую вытекает, что это более тяжеловесный и сложный вариант с точки зрения машинной обработки. Поэтому REST работает быстрее.
	SOAP используют HTTP как транспортный протокол, в то время как REST базируется на нем. Это означает, что все существующие наработки на базе протокола 
	HTTP, такие как кеширование на уровне сервера, масштабирование, продолжают так же работать в REST архитектуре, а для SOAP необходимо искать другие средства.
	REST может быть представлен в различных форматах, а SOAP привязан к XML.
	«REST vs SOAP» можно перефразировать в «Простота vs Стандарты»
	SOAP работает с операциями, а REST – с ресурсами

IS - позволяет сравнить объект и тип данных, что бы определить принадлежит ли наш объект этому типу. Возвращает данная конструкция либо true либо false

AS - служит для перевода объекта к указанному типу, в случае невозможности привести объект к указанному типу мы вместо исключения получим null

ISet<T> - 	Интерфейс предоставляющий методы для создания объединения нескольких множеств, пересечения множеств и определения, является ли одно множество надмножеством или подмножеством другого.

HashSet<T> и SortedSet<T> - Коллекция, содержащая только отличающиеся элементы, называется множеством (set). В составе .NET 4 имеются два множества - HashSet<T> и SortedSet<T>. Оба они реализуют интерфейс ISet<T>. Класс HashSet<T> содержит неупорядоченный список различающихся элементов, а в SortedSet<T> элементы упорядочены.

Dictionary (Словарь) -  представляет собой сложную структуру данных, позволяющую обеспечить доступ к элементам по ключу. Главное свойство словарей - быстрый поиск на основе ключей. Можно также свободно добавлять и удалять элементы, подобно тому, как это делается в List<T>, но без накладных расходов производительности, связанных с необходимостью смещения последующих элементов в памяти.

Partial Class (Разделяемые классы) -  Можно разделить определение класса, структуры, интерфейса или метода между двумя или более исходными файлами. Каждый исходный файл содержит часть определения класса или метода, а во время компиляции приложения все части объединяются.
	Существует несколько ситуаций, когда желательно разделение определения класса.
    При работе над большими проектами распределение класса между различными файлами позволяет нескольким программистам работать с ним одновременно.
    При работе с использованием автоматически создаваемого источника код можно добавлять в класс без повторного создания файла источника. 
	Visual Studio использует этот подход при создании форм Windows Forms, кода оболочки веб-службы и т. д. Можно создать код, который использует эти классы, без необходимости изменения файла, созданного в Visual Studio.

Капча - компьютерный тест, используемый для того, чтобы определить, кем является пользователь системы: человеком или компьютером.

using - оформляет блок кода и создает объект некоторого класса, который реализует интерфейс IDisposable, в частности, его метод Dispose. 
	При завершении блока кода у объекта вызывается метод Dispose.
	Важно, что данная конструкция применяется только для классов, которые реализуют интерфейс IDisposable.
	
Кастомный – это переделанный под потребителя, собранный заново, вручную. Относится к любому изделию, которое изменено под конкретную аудиторию.

Конкатенация (лат. сцепление) - операция склеивания объектов линейной структуры, обычно строк.

Generic<T>(Обобщения) - методы, который принимает аргумент любого типа, что-то делает с ним (например выводит в консоль его через ToString()) и возвращает этот же самый аргумент того же типа

Generic handler (Универсальный обработчик) - В соответствии с MSDN, generic хендлер это хендлер по умолчанию, который имеет директиву @webhandler и расширение .ashx. Создаете вы такой хендлер путем создания .ashx файла. Собственно говоря, в ASP.NET есть стандартный хендлер, который обрабатывет .ashx страницы и больше ничего конфигурировать вам не надо. Можно, использовать для создания миниатюр изображений, когда все запросы будут посылаться .ashx файлу, передавая также размеры миниатюры, а он динамически будет формировать графические файлы заданных размеров
	
CORS (cross-origin resource sharing/совместное использование ресурсов из разных источников) - это механизм безопасности, который позволяет веб-странице из одного домена обращаться к ресурсу с другим доменом (кросс-доменным запросом). Без таких функций, как CORS, веб-сайты ограничиваются доступом к ресурсам одного и того же происхождения через так называемую политику единого происхождения
	
RabbitMQ - message broker: it accepts and forwards messages. You can think about it as a post office: when you put the mail that you want posting in a post box, you can be sure that Mr. or Ms. Mailperson will eventually deliver the mail to your recipient. In this analogy, RabbitMQ is a post box, a post office and a postman. 
	мощный инструмент, реализующий обмен сообщениями между компонентами программной среды, будь-то процессы, web-приложения, клиент-сервер и прочее.	

Ada - язык программирования, созданный в 1979—1980 годах в ходе проекта Министерством обороны США с целью разработать единый язык программирования для встроенных систем (то есть систем управления автоматизированными комплексами, функционирующими в реальном времени). Имелись в виду прежде всего бортовые системы управления военными объектами (кораблями, самолётами, танками, ракетами, снарядами и т. п.). Перед разработчиками не стояло задачи создать универсальный язык, поэтому решения, принятые авторами Ады, нужно воспринимать в контексте особенностей выбранной предметной области. Язык назван в честь Ады Лавлейс.
	
JVM (Java Virtual Machine/виртуальная машина Java) - основная часть исполняющей системы Java, так называемой Java Runtime Environment (JRE). Виртуальная машина Java исполняет байт-код Java, предварительно созданный из исходного текста Java-программы компилятором Java (javac). JVM может также использоваться для выполнения программ, написанных на других языках программирования. Например, исходный код на языке Ada может быть скомпилирован в байт-код Java, который затем может выполниться с помощью JVM
	
Онбординг - ознакомление новых сотрудников с трудовой деятельностью, приспособление к социальной среде организации; иными словами — эффективное включение в коллектив и работу

Figma - онлайн-сервис для разработки интерфейсов и прототипирования с возможностью организации совместной работы в режиме реального времени. Сервис имеет широкие возможности для интеграции с корпоративным мессенджером Slack и инструментом для высокоуровневого прототипирования Framer. Подходит как для создания простых прототипов и дизайн-систем, так и сложных проектов (мобильные приложения, порталы). В 2018 году платформа стала одним из самых быстро развивающихся инструментов для разработчиков и дизайнеров
	
SoapUI - приложение для тестирования веб-сервисов с открытым исходным кодом для сервис-ориентированных архитектур (SOA) и передачи состояний представлений (REST). Его функциональные возможности включают проверку веб-службы, запуск, разработку, моделирование и макетирование, функциональное тестирование, тестирование нагрузки и соответствия

Kibana – тиражируемая свободная програмная панель визуализации данных. В процессе использования программы информация, проиндексированная в кластере Elasticsearch, представляется в виде диаграмм различных видов, таких как столбчатые диаграммы, линейные диаграммы, точечные диаграммы, круговые диаграммы, возможна также визуализация данных в привязке к географическим картам
	
Pull request (Пул реквест) - запрос к управляющему каким-либо репозиторием (человеку, группе людей или вообще роботу) на применение изменений (из вашего репозитория и/или указанной вами ветки). Часто пул реквест делают из репозитория-форка в исходный репозиторий.
	
WSDL (Web Services Description Language) – язык описания веб-сервисов и доступа к ним, основанный на языке XML.
	
Newtonsoft - soft для сериализации, десериализации JSON

Мок - настраиваемый объект, который имитирует поведение реального объекта.

Unix-время (англ. Unix time, также POSIX-время) — система описания моментов во времени, принятая в Unix и других POSIX-совместимых операционных системах. Определяется как количество секунд, прошедших с полуночи (00:00:00 UTC) 1 января 1970 года (четверг); этот момент называют «эпохой Unix» (англ. Unix Epoch). 

CRM(Customer Relationship Management) - Система управления взаимоотношениями с клиентами. Прикладное программное обеспечение для организаций, предназначенное для автоматизации стратегий взаимодействия с заказчиками (клиентами), в частности для повышения уровня продаж, оптимизации маркетинга и улучшения обслуживания клиентов путём сохранения информации о клиентах и истории взаимоотношений с ними, установления и улучшения бизнес-процессов и последующего анализа результатов.

Kibana - тиражируемая свободная программная панель визуализации данных. В процессе использования программы информация, проиндексированная в кластере Elasticsearch, представляется в виде диаграмм различных видов, таких как столбчатые, линейные, точечные, круговые диаграммы, возможна также визуализация данных в привязке к географическим картам.

Сквозное шифрование (end-to-end encryption) - способ передачи данных, в котором только пользователи, участвующие в общении, имеют доступ к сообщениям. Таким образом, использование сквозного шифрования не позволяет получить доступ к криптографическим ключам со стороны третьих лиц. Для обмена ключами могут быть применены симметричный и асимметричный алгоритмы. Сквозное шифрование предполагает, что ключи шифрования известны только общающимся между собой сторонам. Для реализации данного условия может быть использована схема с предварительным разделением секрета или, например, протокол Диффи-Хелмана, который используется в мессенджерах WhatsApp и Telegram
	https://pikabu.ru/story/kak_rabotaet_endtoend_shifrovanie_metod_vzlamyivaetsya_oshibka_5411489

WSDL (Web Services Description Language) - это язык описания веб-сервисов, основанный на XML. На нем описываются методы, входные и результирующие структуры данных, типы данных, сетевые адреса для обращения к сервису и другое.

DTO (Data Transfer Object) - один из шаблонов проектирования, используется для передачи данных между подсистемами приложения. Data Transfer Object, в отличие от business object или data access object не должен содержать какого-либо поведения. 

DWH (data warehouse) - хранилище данных, необходима для того, чтобы делать BI — business intelligence. Бизнес-аналитика — это процесс анализа данных и получения информации, помогающей компаниям принимать решения.
	— предметно-ориентированная информационная база данных, специально разработанная и предназначенная для подготовки отчётов и бизнес-анализа с целью поддержки принятия решений в организации. Строится на базе систем управления базами данных и систем поддержки принятия решений. Данные, поступающие в хранилище данных, как правило, доступны только для чтения.

Масштабируемость (scalability) — в электронике и информатике означает способность системы, сети или процесса справляться с увеличением рабочей нагрузки (увеличивать свою производительность) при добавлении ресурсов

Идемподентность — действие, многократное повторение которого эквивалентно однократному. Примером такой операции могут служить GET-запросы в протоколе HTTP. По спецификации, сервер должен возвращать идентичные ответы на идентичные GET-запросы (при условии, что ресурс не изменился). Это позволяет корректно кэшировать эти ответы, снижая нагрузку на сеть.

ASCX, ASPX - Файл с расширением ASCX используется для веб-управления пользователями ASP.NET, и расшифровывается как расширение активного серверного управления. По сути, файлы ASCX позволяют легко использовать один и тот же код на нескольких веб-страницах ASP.NET, экономя время и энергию при создании веб-сайта.
	Например, несколько файлов ASPX на веб-сайте могут ссылаться на один файл ASCX, который содержит код для меню навигации сайта. Вместо того чтобы писать один и тот же код на каждой странице веб-сайта, которой требуется меню, каждая страница может просто указывать на файл ASCX, что значительно упрощает управление и обновление меню на каждой странице.

Delegat - это по сути указатель на функцию.

Middleware (промежуточное или связующее программное обеспечение) — это фрагмент кода в конвейере приложения, используемый для обработки запросов и ответов. Например, у нас может быть middleware-компонент для аутентификации пользователя, middleware-компонент для обработки ошибок и еще один middleware-компонент для обслуживания статических файлов, таких как файлы JavaScript, CSS, разного рода изображения и т.д.

HTTP - является технология «клиент-сервер», то есть предполагается существование:
    Потребителей (клиентов), которые инициируют соединение и посылают запрос;
    Поставщиков (серверов), которые ожидают соединения для получения запроса, производят необходимые действия и возвращают обратно сообщение с результатом.

	HTTP в настоящее время повсеместно используется во Всемирной паутине для получения информации с веб-сайтов. В 2006 году в Северной Америке доля HTTP-трафика превысила долю P2P-сетей и составила 46 %, из которых почти половина — это передача потокового видео и звука. HTTP используется также в качестве «транспорта» для других протоколов прикладного уровня, таких как SOAP, XML-RPC, WebDAV. 
	
Xamarin - это фреймворк для кроссплатформенной разработки мобильных приложений (iOS, Android, Windows Phone) с использованием языка C#. Xamarin основан на open-source реализации платформы .NET -Mono. Есть определенные статистические данные, что значительная часть мобильных приложений создается более чем для одной платформы, например, для Android и iOS

SCRUM (от англ. scrum «схватка») — метод управления проектами, обычно сравнивают с комунизмом

Лендинг (Landing page) — это страница в сети, на которой исчерпывающе (но кратко) описывается продукт или услуга, а также содержится упрощенная форма обратной связи для совершения активного действия. Проще говоря лендинг -  сайт с одной страницей рекламного характера, который состоит из ряда блоков и ориентирован на товары или услуги.

Фреймворк (framework — остов, каркас, структура) — программная платформа, определяющая структуру программной системы; программное обеспечение, облегчающее разработку и объединение разных компонентов большого программного проекта. Употребляется также слово «каркас», а некоторые авторы используют его в качестве основного, в том числе не базируясь вообще на англоязычном аналоге. Можно также говорить о каркасном подходе как о подходе к построению программ, где любая конфигурация программы строится из двух частей: 
	Постоянная часть — каркас, не меняющийся от конфигурации к конфигурации и несущий в себе гнёзда, в которых размещается вторая, переменная часть;
    Сменные модули (или точки расширения).
middle back end developer в Москве
WordPress - система управления содержимым сайта с открытым исходным кодом; написана на PHP; сервер базы данных — MySQL; выпущена под лицензией GNU GPL версии 2. Сфера применения — от блогов до достаточно сложных новостных ресурсов. Встроенная система «тем» и «плагинов» вместе с удачной архитектурой позволяет конструировать проекты широкой функциональной сложности
	- это система управления, позволяющая работать с контентом сайта и администрировать ресурс. Устанавливается движок на хостинг, где и будут располагаться файлы сайта. А хостинг представляет собой тот же компьютер, только он подключен к сети всегда и работает без перерыва
	
Immutable Types - означает что данные хранящиеся в переменной немогут быть изменены. При этом значение преременной может быть изменено - путем отказа от старых данных, которые могут быть изменены. Оригинальные данные остаются в памяти, а новые создаются вновь, в новой области памяти. Приер таких переменыых, String, DateTime.

StringBuilder - находится в пространстве имен System.Text. Этот класс представляет динамическую строку. Хотя класс System.String предоставляет нам широкую функциональность по работе со строками, все таки он имеет свои недостатки. Прежде всего, объект String представляет собой неизменяемую строку. Когда мы выполняем какой-нибудь метод класса String, система создает новый объект в памяти с выделением ему достаточного места. Удаление первого символа - не самая затратная операция. Однако когда подобных операций множество, а объем текста, для которого надо выполнить данные операции, также не самый маленький, то издержки при потере производительности становятся более существенными. Чтобы выйти из этой ситуации во фреймворк .NET был добавлен новый класс StringBuilder. Этот класс представляет динамическую строку. При создании строки StringBuilder выделяет памяти больше, чем необходимо этой строке.

RPC(Remote Procedure Call) - Удалённый вызов процедур, реже Вызов удалённых процедур  — класс технологий, позволяющих компьютерным программам вызывать функции или процедуры в другом адресном пространстве (на удалённых компьютерах, либо в независимой сторонней системе на том же устройстве). Обычно реализация RPC-технологии включает в себя два компонента: сетевой протокол для обмена в режиме клиент-сервер и язык сериализации объектов (или структур, для необъектных RPC). Различные реализации RPC имеют очень отличающуюся друг от друга архитектуру и разнятся в своих возможностях: одни реализуют архитектуру SOA, другие — CORBA или DCOM. На транспортном уровне RPC используют в основном протоколы TCP и UDP, однако, некоторые построены на основе HTTP (что нарушает архитектуру ISO/OSI, так как HTTP — изначально не транспортный протокол)

gRPC - представляет фреймворк, который использует протокол RPC (Remote Procedure Call) для обмена сообщениями между клиентом и сервером. Цель фреймворка состоит в том, чтобы обеспечить высокую производительность в тех условиях, где это особенно критично, например, при интенсивном обмене информацией в режиме реального времени. gRPC не является частью ASP.NET Core или .NET, более того gRPC представляет технологию, которая не привязана к конкретному языку. Но тем не менее мы можем использовать gRPC в связке с ASP.NET Core для создания приложений.

DRY(Don't repeat yourself) - Не повторяй себя, это принцип разработки программного обеспечения, направленный на сокращение повторения паттернов программного обеспечения, заменяя их абстракциями или используя нормализацию данных, чтобы избежать избыточности.

Анонимные типы - позволяют создать объект с некоторым набором свойств без определения класса. Определяется с помощью ключевого слова var и инициализатора объектов. Следует учитывать, что свойства анонимного объекта доступны для установки только в инициализаторе. Вне инициализатора присвоить им значение мы не можем

readonly и const разница? - Значения констант должны быть установлены к моменту компиляции. Значения полей для чтения можно устанавливать при выполнении программы в конструкторе

Локальная функция - представляют собой частные методы типа, вложенные в другой элемент. Они могут вызываться только из того элемента, в который вложены. Элементы, в которых можно их вложить: Методы, в частности методы итератора и асинхронные методы, Конструкторы, Методы доступа свойств, Методы доступа событий, Анонимные методы, Лямбда-выражения, Методы завершения, Другие локальные функции

GUI(Графический интерфейс пользователя) - графический пользовательский интерфейс. Тоже самое что и API только для людей

Рефлексия - представляет собой процесс выявления типов во время выполнения приложения. Каждое приложение содержит набор используемых классов, интерфейсов, а также их методов, свойств и прочих кирпичиков, из которых складывается приложение. И рефлексия как раз и позволяет определить все эти составные элементы приложения

Lock - с помощью этого слова осуществляется блокировка одновременного выполнения определенных участков кода несколькими потоками

Boxing\Unboxing - При упаковке экземпляра значимого типа происходит следующее. 1. В управляемой куче выделяется память. Ее объем определяется длиной значимого типа и двумя дополнительными членами — указателем на типовой объект и индексом блока синхронизации. Эти члены необходимы для всех объектов в управляемой куче. 2. Поля значимого типа копируются в память, только что выделенную в куче. 3. Возвращается адрес объекта. Этот адрес является ссылкой на объект, то есть значимый тип превращается в ссылочный.
	Распаковка не является точной противоположностью упаковки. Она гораздо менее ресурсозатратна, чем упаковка, и состоит только в получении указателя на исходный значимый тип (поля данных), содержащийся в объекте. В сущности, указатель ссылается на неупакованную часть упакованного экземпляра, и никакого копирования при распаковке (в отличие от упаковки) не требуется. Однако вслед за распаковкой обычно выполняется копирование полей. Понятно, что упаковка и распаковка/копирование снижают производительность приложения (в плане как замедления, так и расходования дополнительной памяти), поэтому нужно знать, когда компилятор сам создает код для выполнения этих операций, и стараться свести их к минимуму
	
Generics(Дженерик) — это особый способ описание используемых типов, который сможет использовать в своей работе компилятор кода для обеспечения типобезопасности

legacy-система — в переводе с английского «наследство», и наследственность эта тяжелая. Почти всем доводилось, придя в проект, получить код десятилетней давности, написанный кем-то другим. Это и есть унаследованный код — то есть код исторический, который часто бывает ужасен настолько, что оказывается вообще непонятно, как с ним работать. И если нам достается legacy-система, то мы, кроме старого кода, также имеем: устаревшие технологии, неоднородную архитектуру, недостаток или даже полное отсутствие документации.

CMS (Content Management System) — это система управления, движок, платформа или конструктор, который позволяет управлять содержимым сайта (WordPress, Эгея, MODx, 1С-Битрикс). CMS помогает сразу трем специалистам:
	Контент-менеджеру. Он может самостоятельно добавлять или изменять содержимое страниц и каталога. Например, публиковать статьи в блоге.
	SEO-специалисту. Чтобы настраивать технические параметры под поисковые системы Яндекс и Google. Например, прописывать мета-теги.
	Разработчику. Чтобы использовать готовые скрипты для добавления функций сайту и экономить время на программировании. Без помощи CMS пришлось бы писать код с нуля.
	
Jenkins — программная система с открытым исходным кодом на Java, предназначенная для обеспечения процесса непрерывной интеграции программного обеспечения.
	Позволяет автоматизировать часть процесса разработки программного обеспечения, в котором не обязательно участие человека, обеспечивая функции непрерывной интеграции. Работает в сервлет-контейнере, например, Apache Tomcat. Поддерживает инструменты системы управления версиями, включая AccuRev, CVS, Subversion, Git, Mercurial, Perforce, Clearcase и RTC. Может собирать проекты с использованием Apache Ant и Apache Maven, а также выполнять произвольные сценарии оболочки и пакетные файлы Windows. Сборка может быть запущена разными способами, например, по событию фиксации изменений в системе управления версиями, по расписанию, по запросу на определённый URL, после завершения другой сборки в очереди.


11111 - 11111